// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package wallet is a generated GoMock package.
package wallet

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMysqlDao is a mock of MysqlDao interface.
type MockMysqlDao struct {
	ctrl     *gomock.Controller
	recorder *MockMysqlDaoMockRecorder
}

// MockMysqlDaoMockRecorder is the mock recorder for MockMysqlDao.
type MockMysqlDaoMockRecorder struct {
	mock *MockMysqlDao
}

// NewMockMysqlDao creates a new mock instance.
func NewMockMysqlDao(ctrl *gomock.Controller) *MockMysqlDao {
	mock := &MockMysqlDao{ctrl: ctrl}
	mock.recorder = &MockMysqlDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMysqlDao) EXPECT() *MockMysqlDaoMockRecorder {
	return m.recorder
}

// GetWalletsForUser mocks base method.
func (m *MockMysqlDao) GetWalletsForUser(ctx context.Context, userID int64) ([]Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletsForUser", ctx, userID)
	ret0, _ := ret[0].([]Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletsForUser indicates an expected call of GetWalletsForUser.
func (mr *MockMysqlDaoMockRecorder) GetWalletsForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletsForUser", reflect.TypeOf((*MockMysqlDao)(nil).GetWalletsForUser), ctx, userID)
}

// NewTransaction mocks base method.
func (m *MockMysqlDao) NewTransaction(ctx context.Context, transaction Transaction) (Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", ctx, transaction)
	ret0, _ := ret[0].(Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *MockMysqlDaoMockRecorder) NewTransaction(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*MockMysqlDao)(nil).NewTransaction), ctx, transaction)
}

// SearchTransactions mocks base method.
func (m *MockMysqlDao) SearchTransactions(ctx context.Context, userID int64, params *SearchRequestParams) (SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTransactions", ctx, userID, params)
	ret0, _ := ret[0].(SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTransactions indicates an expected call of SearchTransactions.
func (mr *MockMysqlDaoMockRecorder) SearchTransactions(ctx, userID, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTransactions", reflect.TypeOf((*MockMysqlDao)(nil).SearchTransactions), ctx, userID, params)
}
